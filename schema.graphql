type Account @entity {
  "Account address"
  id: ID!
  transfersTo: [Transfer!] @derivedFrom(field: "to")
  transfersFrom: [Transfer!] @derivedFrom(field: "from")
  withdrawals: [Withdraw!] @derivedFrom(field: "who")

  burns: [Burn!] @derivedFrom(field: "from")
  burnWithdrawals: [BurnWithdrawal!] @derivedFrom(field: "from")

  crossChainCommitmentsFrom: [CrossChainCommitment!] @derivedFrom(field: "from")
  crossChainDispatchesTo: [CrossChainDispatch!] @derivedFrom(field: "to")
  
  asNodeVotingBeneficiary: [NodeVote!] @derivedFrom(field: "beneficiaryVoter")

  addedLiquidity: [AddLiquidity!] @derivedFrom(field: "who")
  removedLiquidity: [AddLiquidity!] @derivedFrom(field: "who")
  marketGetTokens: [MarketGetToken!] @derivedFrom(field: "who")

  merchantSubscriptions: [MerchantSubscription!] @derivedFrom(field: "who")
  greenPointsTrxAsConsumer: [GreenPointsTransaction!] @derivedFrom(field: "consumer")
  greenPointsTrxAsMerchant: [GreenPointsTransaction!] @derivedFrom(field: "merchant")
}

enum Token {
  D9 USDT
}

# D9
type Transfer @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  from: Account!
  to: Account!
  token: Token! @index
  amount: BigInt! @index
}

type Withdraw @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  who: Account!
  amount: BigInt! @index
}

# Burn manager withdrawal executed
type BurnWithdrawal @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  from: Account!
  amount: BigInt! @index
}

type Burn @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  from: Account!
  amount: BigInt! @index
}

# Cross-chain
type CrossChainCommitment @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  txId: String! @index
  from: Account!
  amount: BigInt! @index
}

type CrossChainDispatch @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  txId: String! @index
  to: Account!
  amount: BigInt! @index
}

#d9 node voting
type NodeVote @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  amount: BigInt!
  beneficiaryVoter: Account!
  burnContract: String!
  mainPool: String!
}

#amm
type AddLiquidity @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  who: Account!
  d9: BigInt!
  usdt: BigInt!
}

type RemoveLiquidity @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  who: Account!
}

type MarketGetToken @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  token: Token!
  who: Account!
  value: BigInt!
}

type MerchantSubscription @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  expiry: DateTime!
  who: Account!
}

type GreenPointsTransaction @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  fee: BigInt!
  merchant: Account!
  merchantGP: BigInt!
  consumer: Account!
  consumerGP: BigInt!
}
