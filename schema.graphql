type Account @entity {
  "Account address"
  id: ID!
  receivedTransfers: [Transfer!] @derivedFrom(field: "to")
  sendTransfers: [Transfer!] @derivedFrom(field: "from")
  withdrawals: [Withdraw!] @derivedFrom(field: "who")
  
  asNodeVotingBeneficiary: [NodeVote!] @derivedFrom(field: "beneficiaryVoter")

# Burn Manager
  burnExecutes: [BurnExecuted!] @derivedFrom(field: "from")
  burnWithdrawals: [BurnWithdrawal!] @derivedFrom(field: "from")

# Cross Chain Transfer
  chainCommitments: [CrossChainCommitCreated!] @derivedFrom(field: "from")
  crossChainDispatches: [CrossChainDispatchCompleted!] @derivedFrom(field: "to")

# Market Maker
  liquidityAddeds: [LiquidityAdded!] @derivedFrom(field: "who")
  liquidityRemoves: [LiquidityRemoved!] @derivedFrom(field: "who")
  marketConversions: [MarketConversion!] @derivedFrom(field: "who")

# Merchant
  merchantSubscriptions: [MerchantSubscriptionExtended!] @derivedFrom(field: "who")
  merchantRedeemeds: [MerchantRedeemed!] @derivedFrom(field: "who")
  sentGreenPointsTransactions: [GreenPointsTransaction!] @derivedFrom(field: "consumer")
  receivedGreenPointsTransactions: [GreenPointsTransaction!] @derivedFrom(field: "merchant")
  sentMerchantPayments: [MerchantPaymentSent!] @derivedFrom(field: "consumer")
  receivedMerchantPayments: [MerchantPaymentSent!] @derivedFrom(field: "merchant")

# Node Reward
  asNodeRewardNode: [NodeRewardPaid!] @derivedFrom(field: "node")
  receivedNodeRewards: [NodeRewardPaid!] @derivedFrom(field: "receiver")
}

enum Token {
  D9 USDT
}

# D9
type Transfer @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  from: Account!
  to: Account!
  amount: BigInt! @index
  
  token: Token! @index
}

type Withdraw @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  who: Account!
  amount: BigInt! @index
}

#d9 node voting
type NodeVote @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  amount: BigInt!
  beneficiaryVoter: Account!
  burnContract: String!
  mainPool: String!
}

# Burn manager withdrawal executed
type BurnWithdrawal @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  from: Account!
  amount: BigInt! @index
}

type BurnExecuted @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  from: Account!
  amount: BigInt! @index
}

# Cross-chain
type CrossChainCommitCreated @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  
  txId: String! @index
  from: Account!
  amount: BigInt! @index
}

type CrossChainDispatchCompleted @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index

  txId: String! @index
  to: Account!
  amount: BigInt! @index
}

# Market-Maker
type LiquidityAdded @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  who: Account!
  d9: BigInt!
  usdt: BigInt!
}

type LiquidityRemoved @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  who: Account!
  d9: BigInt!
  usdt: BigInt!
}

type MarketConversion @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  fromToken: Token!
  toToken: Token!
  lost: BigInt!
  got: BigInt!
  who: Account!
}

# Merchant

type MerchantSubscriptionExtended @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  expiry: DateTime!
  amount: BigInt!
  paymentToken: Token!
  who: Account!
}

type MerchantRedeemed @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  who: Account!
  token: Token!
  amount: BigInt!
}

type GreenPointsTransaction @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  merchant: Account!
  merchantGP: BigInt!
  consumer: Account!
  consumerGP: BigInt!
}

type MerchantPaymentSent @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  merchant: Account!
  consumer: Account!
  amount: BigInt!
  paymentToken: Token!
}

# Node Reward
type NodeRewardPaid @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  node: Account!
  receiver: Account!
  amount: BigInt!
}
