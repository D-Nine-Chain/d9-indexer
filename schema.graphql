type Account @entity {
  "Account address"
  id: ID!

  d9Balance: BigInt @index
  usdtBalance: BigInt @index
  greenPointsBalance: BigInt @index
  mineBalance: BigInt @index

  receivedTransfers: [Transfer!] @derivedFrom(field: "to")
  sendTransfers: [Transfer!] @derivedFrom(field: "from")
  withdrawals: [Withdraw!] @derivedFrom(field: "who")
  
  asNodeVotingBeneficiary: [NodeVote!] @derivedFrom(field: "beneficiaryVoter")

# Burn Manager
  burnExecutes: [BurnExecuted!] @derivedFrom(field: "from")
  burnWithdrawals: [BurnWithdrawal!] @derivedFrom(field: "from")

# Cross Chain Transfer
  chainCommitments: [CrossChainCommitCreated!] @derivedFrom(field: "from")
  crossChainDispatches: [CrossChainDispatchCompleted!] @derivedFrom(field: "to")

# Market Maker
  liquidityAddeds: [LiquidityAdded!] @derivedFrom(field: "who")
  liquidityRemoves: [LiquidityRemoved!] @derivedFrom(field: "who")
  marketConversions: [MarketConversion!] @derivedFrom(field: "who")

# Merchant
  merchantSubscriptions: [MerchantSubscriptionExtended!] @derivedFrom(field: "who")
  merchantRedeemeds: [MerchantRedeemed!] @derivedFrom(field: "who")
  sentGreenPointsTransactions: [GreenPointsTransaction!] @derivedFrom(field: "consumer")
  receivedGreenPointsTransactions: [GreenPointsTransaction!] @derivedFrom(field: "merchant")
  sentMerchantPayments: [MerchantPaymentSent!] @derivedFrom(field: "consumer")
  receivedMerchantPayments: [MerchantPaymentSent!] @derivedFrom(field: "merchant")

# Node Reward
  asNodeRewardNode: [NodeRewardPaid!] @derivedFrom(field: "node")
  receivedNodeRewards: [NodeRewardPaid!] @derivedFrom(field: "receiver")

  calls: [Call!] @derivedFrom(field: "address")
}

enum Token {
  D9 USDT
}

# D9
type Transfer @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!

  from: Account!
  to: Account!
  amount: BigInt! @index
  success: Boolean!
  token: Token! @index
}

type Withdraw @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  who: Account!
  amount: BigInt! @index
}

#d9 node voting
type NodeVote @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  amount: BigInt!
  beneficiaryVoter: Account!
  burnContract: String!
  mainPool: String!
}

# Burn manager withdrawal executed
type BurnWithdrawal @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  from: Account!
  amount: BigInt! @index
}

type BurnExecuted @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  from: Account!
  amount: BigInt! @index
}

# Cross-chain
type CrossChainCommitCreated @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  txId: String! @index
  from: Account!
  amount: BigInt! @index
}

type CrossChainDispatchCompleted @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  txId: String! @index
  to: Account!
  amount: BigInt! @index
}

# Market-Maker
type LiquidityAdded @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  who: Account!
  d9: BigInt!
  usdt: BigInt!
}

type LiquidityRemoved @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  who: Account!
  d9: BigInt!
  usdt: BigInt!
}

type MarketConversion @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  fromToken: Token!
  toToken: Token!
  lost: BigInt!
  got: BigInt!
  who: Account!
}

# Merchant

type MerchantSubscriptionExtended @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  expiry: DateTime!
  amount: BigInt!
  paymentToken: Token!
  who: Account!
}

type MerchantRedeemed @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  who: Account!
  token: Token!
  amount: BigInt!
}

type GreenPointsTransaction @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  merchant: Account!
  merchantGP: BigInt!
  consumer: Account!
  consumerGP: BigInt!
}

type MerchantPaymentSent @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  merchant: Account!
  consumer: Account!
  amount: BigInt!
  paymentToken: Token!
}

# Node Reward
type NodeRewardPaid @entity {
  id: ID!
  blockNumber: Int! @index
  blockHash: String! @index
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  fee: BigInt!
  success: Boolean!
  node: Account!
  receiver: Account!
  amount: BigInt!
}

# Block related entities
type Block @entity {
  id: ID!
  number: Int! @index
  timestamp: DateTime! @index
  hash: String! @index
  parentHash: String! @index
  stateRoot: String! @index
  extrinsicsRoot: String! @index
  validator: Account!
  specName: String!
  specVersion: Int!
  implName: String!
  implVersion: Int!
  
  extrinsics: [Extrinsic!] @derivedFrom(field: "block")
  events: [Event!] @derivedFrom(field: "block")
  calls: [Call!] @derivedFrom(field: "block")
  # logs: [Log!] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!
  block: Block!
  index: Int! @index
  timestamp: DateTime! @index
  hash: String @index
  # e.g. nominationPools
  module: String @index
  # e.g. claimPayout
  call: String @index
  signer: Account
  success: Boolean!
  parameters: JSON!

  calls: [Call!] @derivedFrom(field: "extrinsic")
  events: [Event!] @derivedFrom(field: "extrinsic")
}
type Call @entity { 
  id: ID!
  block: Block!
  extrinsic: Extrinsic!
  extrinsicHash: String! @index
  index: Int! @index
  timestamp: DateTime! @index
  address: Account!
  # e.g. claimPayout
  method: String! @index
  # e.g. nominationPools(claimPayout)
  call: String! @index
  parameters: JSON!
  success: Boolean!

  events: [Event!] @derivedFrom(field: "call")
}

type Event @entity {
  id: ID!
  block: Block!
  extrinsic: Extrinsic
  extrinsicHash: String! @index
  index: Int! @index
  timestamp: DateTime! @index
  # e.g. balances
  module: String! @index
  # e.g. Withdraw
  name: String! @index
  attributes: JSON!
  success: Boolean!

  call: Call
}

# type Log @entity {
#   id: ID!
#   block: Block!
#   index: Int! @index
#   timestamp: DateTime! @index
  
#   # e.g. preRuntime
#   type: String! @index
#   data: String
  
#   # Metadata
#   timestamp: DateTime! @index
# }
